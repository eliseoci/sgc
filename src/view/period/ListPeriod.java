/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.period;

import controller.ControllerConfig;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import view.helper.CustomTableModel;
import view.helper.HelperOfForms;

/**
 *
 * @author winvm
 */
public class ListPeriod extends javax.swing.JInternalFrame {

    /**
     * Creates new form ListPoll
     */
    public ListPeriod(JFrame parent) {
        table = new JTable();
        model = new CustomTableModel();
        initTable();
        initComponents();
        this.parent = parent;
        controllerConfig = new ControllerConfig();
        controllerConfig.getAllPeriod(this);
    }

    private void initTable() {
        model = new CustomTableModel();
        model.addColumn("ID");
        model.addColumn("Descripcion");
        model.addColumn("Procesado");
        table = new JTable(model) {
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    default:
                        return Boolean.class;
                }
            }
        };
    }

    public JTable getTable() {
        return table;
    }

    public CustomTableModel getModel() {
        return model;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnUpdate = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnConfig = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnCopyConf = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane(table);

        setClosable(true);
        setResizable(true);
        setTitle("Período");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Nuevo");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(jSeparator1);

        btnUpdate.setText("Actualizar");
        btnUpdate.setFocusable(false);
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jToolBar1.add(btnUpdate);
        jToolBar1.add(jSeparator2);

        btnConfig.setText("Configuracion");
        btnConfig.setFocusable(false);
        btnConfig.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConfig.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });
        jToolBar1.add(btnConfig);
        jToolBar1.add(jSeparator3);

        btnCopyConf.setText("Copiar Configuracion");
        btnCopyConf.setEnabled(false);
        btnCopyConf.setFocusable(false);
        btnCopyConf.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCopyConf.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCopyConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyConfActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCopyConf);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new FormPeriod(parent, true, controllerConfig).setVisible(true);
        HelperOfForms.cleanModel(model);
        controllerConfig.getAllPeriod(this);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            new FormPeriod(parent, true, controllerConfig, HelperOfForms.getValueOfCell(table, model, 0)).setVisible(true);
            HelperOfForms.cleanModel(model);
            controllerConfig.getAllPeriod(this);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Período.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        try {
            new FormConfig(parent, true, controllerConfig, HelperOfForms.getValueOfCell(table, model, 0)).setVisible(true);
            HelperOfForms.cleanModel(model);
            controllerConfig.getAllPeriod(this);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Período.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnCopyConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyConfActionPerformed
         try {
            new FormPeriod(parent, true, controllerConfig, HelperOfForms.getValueOfCell(table, model, 0), 1).setVisible(true);
            HelperOfForms.cleanModel(model);
            controllerConfig.getAllPeriod(this);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Período.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCopyConfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnCopyConf;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    private JFrame parent;
    private JTable table;
    private CustomTableModel model;
    private ControllerConfig controllerConfig;
}
